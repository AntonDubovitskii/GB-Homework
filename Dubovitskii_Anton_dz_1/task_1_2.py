"""a) Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):

Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.

   b) К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых
делится нацело на 7."""


def sum_list_1(dataset: list) -> int:
    """Вычисляет сумму чисел списка dataset, сумма цифр которых делится нацело на 7"""
    # Инициализация переменной, которую вернет функция
    final_number = 0
    # В каждом из элементов, содержащихся в my_list, подсчитывается количество символов
    for item in dataset:
        item_length = len(str(item))
        # На каждой итерации цикла значение item заносится во вспомогательную переменную, чтобы можно было с ним работать
        support_number = item
        # Инициализируются и обнуляются переменные count_summ - для хранения суммы цифр каждого элемента и enm - счетчик
        count_summ = 0
        enm = 0
        # Каждый элемент, изначально полученный из my_list, делится на 10 с остатком. Остаток представляет из себя\
        # последнюю цифру значения элемента, она прибавляется к значению переменной count_summ. В то же время значение\
        # из списка делится на 10 без остатка и результат заносится в ту же переменную, чтобы на следующей итерации\
        # работать уже со следующей цифрой
        while enm < item_length:
            count_summ = count_summ + support_number % 10
            support_number = support_number // 10
            enm = enm + 1
        # В результате завершения работы цикла while получаем переменную, содержащию сумму цифр текущего элемента списка\
        # Если это значение делится на 7 без остатка - значит выполняется условие задания и значение\
        # к переменной final_number. После завержения цикла for, данная переменная будет содержать сумму значений\
        # элементов my_list, сумма цифр которых делится нацело на 7
        if count_summ % 7 == 0:
            final_number = final_number + item

    return final_number


def sum_list_2(dataset: list) -> int:
    """К каждому элементу списка добавляет 17 и вычисляет сумму чисел списка,
        сумма цифр которых делится нацело на 7"""
    final_number = 0

    support_list = dataset
    i = 0
    #Отличие данной функции в том, что по заданию необходимо к каждому элементу списка прибавить 17. При помощи цикла\
    #while берется каждый элемент списка dataset, к нему прибавляется 17 и записывается по соответствующему индексу\
    #в новый список support_list, после чего работа идет уже с ним
    while i < len(support_list):
        support_list[i] = support_list[i] + 17
        i = i + 1

    for item in support_list:
        item_length = len(str(item))
        support_number = item
        count_summ = 0
        enm = 0
        while enm < item_length:
            count_summ = count_summ + support_number % 10
            support_number = support_number // 10
            enm = enm + 1
        if count_summ % 7 == 0:
            final_number = final_number + item

    return final_number


#Инициализация переменной счетчика и основного списка
x = 0
my_list = []

#Заполнение my_list нечетными значениями от 1 до 999 включительно
my_list.extend(range(1, 1000, 2))

#Следуя условию задания, каждый элемент получившегося списка возводится в третью степень
while x < len(my_list):
    my_list[x] = my_list[x] ** 3
    x = x + 1

result_1 = sum_list_1(my_list)
print(result_1)
result_2 = sum_list_2(my_list)
print(result_2)
